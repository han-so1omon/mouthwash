/*
  Copyright 2007-2019 David Robillard <http://drobilla.net>

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted, provided that the above
  copyright notice and this permission notice appear in all copies.

  THIS SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/

#ifdef __cplusplus
extern "C" {
#endif

#include "lilv-0/lilv/lilv.h"

#include "lv2/core/lv2.h"

#ifdef __cplusplus
}
#endif

#include <math.h>
#include <sndfile.h>
#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MOUTHWASH_VERSION "1.0"

/** Control port value set from teh command line */
struct Param {
      const char*   sym; ///< Port symbol
      float         value;     ///< Control value
};

/** Port type */
enum PortType { TYPE_CONTROL, TYPE_AUDIO };

/** Runtime port information */
struct Port {
      const LilvPort* lilv_port; ///< Port description
      PortType        type;             ///< Datatype
      uint32_t        index;            ///< Port index
      float           value;               ///< Control value (if applicable)
      bool            is_input;             ///< True iff an input port
      bool            optional;             ///< True iff connection optional
};

struct LV2Apply {
  LilvWorld*       world;
  const LilvPlugin* plugin;
  LilvInstance*     instance;
  const char*       in_path;
  const char*       out_path;
  SNDFILE*          in_file;
  SNDFILE*          out_file;
  unsigned          n_params;
  Param*            params;
  unsigned          n_ports;
  unsigned          n_audio_in;
  unsigned          n_audio_out;
  Port*             ports;
  int               service_port;
};

static int fatal(LV2Apply *self, int status, const char *fmt, ...);

/** Open a sound file with error handling. */
static SNDFILE*
sopen(LV2Apply *self, const char *path, int mode,
                      SF_INFO *fmt)
{
      SNDFILE* file = sf_open(path, mode, fmt);
      const int st  = sf_error(file);
      if (st) {
          fatal(self, 1, "Failed to open %s (%s)\n", path, sf_error_number(st));
      }
      return file;
}

/** Close a sound file with error handling. */
static void
sclose(const char* path, SNDFILE* file)
{
    int st;
    if (file && (st = sf_close(file))) {
        fatal(NULL, 1, "Failed to close %s (%s)\n", path, sf_error_number(st));
    }
}

/**
  Read a single frame from a file into an interleaved buffer.

  If more channels are required than available in the file, the remaining
  channels are distributed in a round-robin fashion (LRLRL).
*/
static bool
sread(SNDFILE* file, unsigned file_chans, float* buf, unsigned buf_chans)
{
    const sf_count_t n_read = sf_readf_float(file, buf, 1);
    for (unsigned i = file_chans - 1; i < buf_chans; i++) {
        buf[i] = buf[i % file_chans];
    }

    return n_read == 1;
}

/** Clean up all resources. */
static int
cleanup(int status, LV2Apply* self)
{
    sclose(self->in_path, self->in_file);
    sclose(self->out_path, self->out_file);
    lilv_instance_free(self->instance);
    lilv_world_free(self->world);
    free(self->ports);
    free(self->params);
    return status;
}

/** Print a fatal error and clean up for exit. */
static int
fatal(LV2Apply* self, int status, const char* fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    fprintf(stderr, "error: ");
    vfprintf(stderr, fmt, args);
    va_end(args);
    return self ? cleanup(status, self) : status;
}

/**
  Create port structures from data (via create_port()) for all ports.
*/
static int
create_ports(LV2Apply* self)
{
    LilvWorld*      world   = self->world;
    const uint32_t  n_ports = lilv_plugin_get_num_ports(self->plugin);
    self->n_ports = n_ports;
    self->ports = (Port*)calloc(self->n_ports, sizeof(Port));

    /* Get default values for all ports */
    float* values = (float*)calloc(n_ports, sizeof(float));
    lilv_plugin_get_port_ranges_float(self->plugin, NULL, NULL, values);

    LilvNode* lv2_InputPort             = lilv_new_uri(world, LV2_CORE__InputPort);
    LilvNode* lv2_OutputPort           = lilv_new_uri(world, LV2_CORE__OutputPort);
    LilvNode* lv2_AudioPort             = lilv_new_uri(world, LV2_CORE__AudioPort);
    LilvNode* lv2_ControlPort           = lilv_new_uri(world, LV2_CORE__ControlPort);
    LilvNode* lv2_connectionOptional    = lilv_new_uri(world, LV2_CORE__connectionOptional);

    for (uint32_t i = 0; i < n_ports; ++i) {
        Port*           port    = &self->ports[i];
        const LilvPort* lport   = lilv_plugin_get_port_by_index(self->plugin,
                i);

        port->lilv_port = lport;
        port->index     = i;
        port->value     = isnan(values[i]) ? 0.0f : values[i];
        port->optional  = lilv_port_has_property(
                self->plugin, lport, lv2_connectionOptional);

        /* Check if port is an input or output */
        if (lilv_port_is_a(self->plugin, lport, lv2_InputPort)) {
            port->is_input = true;
        } else if (!lilv_port_is_a(self->plugin, lport, lv2_OutputPort) &&
                !port->optional) {
            return fatal(self, 1, "Port %d is neither input nor output\n", i);
        }

        /* Check if port is an audio or control port */
        if (lilv_port_is_a(self->plugin, lport, lv2_ControlPort)) {
            port->type = TYPE_CONTROL;
        } else if (lilv_port_is_a(self->plugin, lport, lv2_AudioPort)) {
            port->type = TYPE_AUDIO;
            if (port->is_input) {
                ++self->n_audio_in;
            } else {
                ++self->n_audio_out;
            }
        } else if (!port->optional) {
            return fatal(self, 1, "Port %d has unsupported type\n", i);
        }
    }

    lilv_node_free(lv2_connectionOptional);
    lilv_node_free(lv2_ControlPort);
    lilv_node_free(lv2_AudioPort);
    lilv_node_free(lv2_OutputPort);
    lilv_node_free(lv2_InputPort);
    free(values);

    return 0;
}

static void
print_version(void)
{
    printf("mouthwash " MOUTHWASH_VERSION "\n");
}

static int
print_usage(int status)
{
    fprintf(status ? stderr : stdout,
            "Usage: mouthwash [OPTION]...\n"
            "Generate cool sounds.\n\n"
            "   --port  PORT    Service port for communication with client\n");
    return status;
}

int main(int argc, char **argv) {
    LV2Apply self = {
        NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, 0, 0, 0, NULL
    };

    /* Parse command line arguments */
    const char* plugin_uri = NULL;
    for (int i=0; i < argc; ++i) {
        if (!strcmp(argv[i], "--version")) {
            free(self.params);
            print_version();
            return 0;
        } else if (!strcmp(argv[i], "--help")) {
            free(self.params);
            return print_usage(0);
        } else if (!strcmp(argv[i], "--port")) {
            self.service_port = atoi(argv[++i]);
        }
    }

    /* Check that required arguments are given */
    if (!self.in_path || !self.out_path || !plugin_uri)

    return 0;
}
